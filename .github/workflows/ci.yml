name: Build

on: [push]


jobs:
  build-mimalloc:
    uses: ./.github/workflows/mimalloc.yml

  build:
    name: Build
    needs: build-mimalloc

    strategy:
      fail-fast: false
      matrix:
        include:
          - id: 'windows-amd64'
            os: 'windows-latest'
            # When unpacking an archive on Windows, the symlinks can't be
            # created unless the target path already exists. This causes
            # problems when the linked file is ordered after the link
            # inside the archive. Dereferencing the files when packing them
            # adds an additional copy per link, but it reliably works and
            # the additional size is not too large on Windows.
            tar_extra_args: '--dereference'
          - { build_tool: mingw64, sys: mingw64, msys2: 'true' }
          - { build_tool: mingw32, sys: mingw32, msys2: 'true' }
          - { build_tool: mingw-ucrt64, sys: ucrt64, msys2: 'true' }
          - { build_tool: mingw-clang64, sys: clang64, msys2: 'true' }
        exclude: # only Clang supports ThinLTO
          - lto: Thin
            build_tool: mingw64
          - lto: Thin
            build_tool: mingw32
          - lto: Thin
            build_tool: ucrt64
        build_tool: [clang, vs, mingw64, mingw32, mingw-ucrt64, mingw-clang64]
        id: ['windows-amd64']
        llvm_version: ['main', 'llvmorg-18-init-4631-gd50b56d1']
        llvm_repo_url: ['https://github.com/llvm/llvm-project.git']
        cmake_build_type: ['Release'] # 'MinSizeRel']
        lto: ['Off', 'Thin', 'Full']
    env:
      mimalloc_artifact_name: ${{ needs.build-mimalloc.outputs.artifact }}
      project_location: ${{ startsWith(matrix.id, 'windows-') && 'C:\llvm-project' || 'llvm-project' }}
      SEVENZ_FILE_PATH: fixme pls
      RELEASE_TAG: fixme pls
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out the code
        uses: actions/checkout@v3

      - uses: ./.github/actions/setup-pstoolkit

      - uses: msys2/setup-msys2@v2
        if: startsWith(matrix.id, 'windows-') && matrix.msys2 == 'true'
        with:
          update: true
          msystem: ${{matrix.sys}}
          pacboy: |
            openssl llvm clang lld polly:p ninja make cmake libffi pkg-config python gcc
          # pacboy: 'openssl llvm clang lld polly:p ninja make cmake libffi pkg-config python mingw-w64-x86_64-polly:'

      - if: matrix.build_tool == 'mingw-ucrt64'
        run: C:\Windows\system32\cmd.exe /D /S /C D:\a\_temp\setup-msys2\msys2.cmd -c pacman --noconfirm -Syu --overwrite mingw-w64-ucrt-x86_64-polly

      - if: matrix.build_tool == 'mingw-clang64'
        run: C:\Windows\system32\cmd.exe /D /S /C D:\a\_temp\setup-msys2\msys2.cmd -c pacman --noconfirm -Syu --overwrite mingw-w64-clang-x86_64-polly

      - if: matrix.build_tool != 'mingw-ucrt64' && matrix.build_tool != 'mingw-clang64'
        run: C:\Windows\system32\cmd.exe /D /S /C D:\a\_temp\setup-msys2\msys2.cmd -c pacboy --noconfirm -S --needed polly

      - run: Get-PSDrive

      - name: Download static mimalloc
        if: startsWith(matrix.id, 'windows-')
        uses: actions/download-artifact@v2
        with:
          name: ${{ env.mimalloc_artifact_name }}
          path: C:/mimalloc.lib

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 512M
          key: ${{ matrix.id }}-${{ matrix.llvm_version }}-${{ matrix.build_tool }}-${{ matrix.cmake_build_type }}-${{ matrix.lto }}
          variant: sccache

      - name: Install `ninja` on Ubuntu
        if: startsWith(matrix.id, 'linux-')
        shell: bash
        run: |
          sudo apt-get install ninja-build -y

      - name: Install `ninja` on macOS
        if: startsWith(matrix.id, 'darwin-')
        shell: bash
        run: |
          brew install ninja

      - name: Install `ninja` on Windows
        if: startsWith(matrix.id, 'windows-') && matrix.build_tool == 'clang'
        uses: seanmiddleditch/gha-setup-ninja@master

      - name: Install LLVM and Clang on Windows
        if: startsWith(matrix.id, 'windows-') && matrix.build_tool == 'clang'
        uses: KyleMayes/install-llvm-action@master
        with:
          version: '17.0.2'
          force-version: true
          cached: false
          env: true

      - name: Install cross-compilation tools
        if: matrix.id == 'linux-aarch64'
        shell: bash
        run: |
          sudo apt-get install gcc-12-aarch64-linux-gnu g++-12-aarch64-linux-gnu gcc-12-multilib binutils-aarch64-linux-gnu libgcc-12-dev-arm64-cross libstdc++6-arm64-cross -y

      - name: Install cross-compilation tools
        if: matrix.id == 'linux-riscv64'
        shell: bash
        run: |
          sudo apt-get install gcc-12-riscv64-linux-gnu g++-12-riscv64-linux-gnu gcc-12-multilib binutils-riscv64-linux-gnu libgcc-12-dev-riscv64-cross libstdc++6-riscv64-cross -y

      - name: Build
        if: matrix.id != 'windows-amd64' && matrix.id != 'linux-aarch64' && matrix.id != 'linux-riscv64'
        shell: bash
        run: |
          ./build.sh "${{ matrix.llvm_version }}" "${{ matrix.llvm_repo_url }}"

      - name: Build (linux-aarch64)
        if: matrix.id == 'linux-aarch64'
        shell: bash
        run: |
          ./build.sh "${{ matrix.llvm_version }}" "${{ matrix.llvm_repo_url }}" aarch64

      - name: Build (linux-aarch64)
        if: matrix.id == 'linux-riscv64'
        shell: bash
        run: |
          ./build.sh "${{ matrix.llvm_version }}" "${{ matrix.llvm_repo_url }}" riscv64

      - name: Build (Windows)
        if: matrix.id == 'windows-amd64'
        shell: pwsh
        run: |
          ./build.ps1 "${{ matrix.llvm_version }}" "${{ matrix.llvm_repo_url }}" "${{ matrix.build_tool }}" "${{ matrix.cmake_build_type }}" "${{ matrix.lto }}" "${{ env.project_location }}"

      - name: Inspect (non-Windows)
        shell: bash
        if: |
          !startsWith(matrix.id, 'windows-')
        run: |
          PATH=llvm-project/build/destdir/bin:llvm-project/build/destdir/usr/bin:$PATH llvm-config --version
          PATH=llvm-project/build/destdir/bin:llvm-project/build/destdir/usr/bin:$PATH clang --version

      - name: Inspect (Windows)
        shell: pwsh
        if: |
          startsWith(matrix.id, 'windows-')
        run: |
          $env:PATH = "$env:PROJECT_LOCATION\build\destdir\bin;$env:PROJECT_LOCATION\build\destdir\usr\bin;$env:PATH"
          llvm-config --version
          clang --version

      - name: Zip
        shell: pwsh
        run: |
          Set-GitHubActionsEnv SEVENZ_FILE_PATH "${{ env.project_location }}/${{ matrix.id }}-${{ matrix.llvm_version }}-${{ matrix.build_tool }}-${{ matrix.cmake_build_type }}-${{ matrix.lto }}.7z"

          7z a "$env:SEVENZ_FILE_PATH" "$env:PROJECT_LOCATION/build/destdir/*"

      #- name: Upload Artifacts
      #  uses: actions/upload-artifact@v3
      #  with:
      #    name: ${{ matrix.id }}-${{ matrix.llvm_version }}-${{ matrix.cmake_build_type }}
      #    path: ${{ env.project_location }}/dist
      #    if-no-files-found: error
      #    retention-days: 9

      - name: Tag published version
        shell: pwsh
        run: |
          Set-GitHubActionsEnv RELEASE_TAG "${{ matrix.llvm_version }}"

          git tag -a "$env:RELEASE_TAG" -m "Published version $env:RELEASE_TAG" $env:GITHUB_SHA
          git push origin $env:RELEASE_TAG

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          #name: Release ${{ matrix.llvm_version }}
          draft: false
          prerelease: false
          files: |
            ${{ env.SEVENZ_FILE_PATH }}.7z

#  release:
#    name: Release
#
#    runs-on: ubuntu-latest
#    # if: startsWith(github.ref, 'refs/tags/')
#
#    needs: [build]
#
#    permissions:
#      contents: write
#
#    #strategy:
#      #fail-fast: false
#      #matrix:
#      #  llvm_version: ['main', 'llvmorg-18-init-4631-gd50b56d1']
#
#    steps:
#      - name: Download artifacts
#        uses: actions/download-artifact@v3
#        with:
#          path: artifacts
#
#      - name: Inspect
#        shell: bash
#        run: |
#          ls -laGiR ./*
#
#      - name: Rename artifacts
#        shell: pwsh
#        run: |
#          Get-ChildItem -Recurse -Path ./artifacts | where { ! $_.PSIsContainer } | ForEach-Object { Move-Item -Path $_ -Destination $($_.FullName -replace 'artifacts[\\/](?<id>.*?)-(?<version>.*?)-(?<buildType>.*?)[\\/]llvm.7z','artifacts/${id}-${version}-${buildType}.7z') }
