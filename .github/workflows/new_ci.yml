name: Build try 2

on:
  push:
  workflow_dispatch:
    inputs:
      version:
        required: true
        description: The LLVM release to pull


jobs:
  build:
    permissions:
      contents: write # In order to be able to push releases

    runs-on: windows-latest
    env:
      VERSION: '18.1.7'
    
    steps:
      - uses: actions/checkout@v4
      - shell: cmd
        run: |
          setlocal enabledelayedexpansion
          
          rem !!! build requirements !!!
          rem Visual Studio 2022 - https://visualstudio.microsoft.com/vs/
          rem 7-Zip - https://www.7-zip.org/download.html
          rem Python - https://www.python.org/downloads/
          rem CMake - http://www.cmake.org/download/
          rem ninja.exe - https://github.com/ninja-build/ninja/releases/latest
          
          set VERSION=${{ env.VERSION }}
          
          
          
          echo downloading and unpacking...
          
          if exist "%ProgramFiles%\7-Zip\7z.exe" (
            set SZIP="%ProgramFiles%\7-Zip\7z.exe"
          ) else (
            where /q 7za.exe || (
              echo ERROR: 7-Zip installation or "7za.exe" not found
              exit /b 1
            )
            set SZIP=7za.exe
          )
          
          curl -sfL https://github.com/llvm/llvm-project/releases/download/llvmorg-%VERSION%/llvm-project-%VERSION%.src.tar.xz ^
            | %SZIP% x -bb0 -txz -si -so ^
            | %SZIP% x -bb0 -ttar -si -aoa 1>nul 2>nul
          del /y pax_global_header 1>nul 2>nul
          
          
          
          where /Q cl.exe || (
            set __VSCMD_ARG_NO_LOGO=1
            for /f "tokens=*" %%i in ('"C:\Program Files (x86)\Microsoft Visual Studio\Installer\vswhere.exe" -latest -requires Microsoft.VisualStudio.Workload.NativeDesktop -property installationPath') do set VS=%%i
            if "!VS!" equ "" (
              echo ERROR: Visual Studio installation not found
              exit /b 1
            )  
            call "!VS!\VC\Auxiliary\Build\vcvarsall.bat" amd64 || exit /b 1
          )
          
          
          
          rem ** You can add more targets to LLVM_TARGETS_TO_BUILD line, or just remove it to build all possible targets
          rem ** Remove clang-tools-extra from LLVM_ENABLE_PROJECTS if you don't need clang-tidy / clangd / other clang tools
          rem ** Remove compiler-rt from LLVM_ENABLE_PROJECTS if you don't need clang's sanitizers
          rem ** Remove lldb from LLVM_ENABLE_PROJECTS if you don't need lldb debugger
          rem ** Build in configuration below takes ~20min on 16-core Ryzen 9 5950X
          rem ** Without clang-tools-extra & lldb it takes ~15min
          cmake ^
            -G Ninja ^
            -S "llvm-project-%VERSION%.src\llvm" ^
            -B "llvm-project-%VERSION%.build" ^
            -D CMAKE_INSTALL_PREFIX="%CD%\llvm-project-%VERSION%" ^
            -D CMAKE_BUILD_TYPE=Release ^
            -D CMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded ^
            -D BUILD_SHARED_LIBS=OFF ^
            -D LLVM_OPTIMIZED_TABLEGEN=ON ^
            -D LLVM_ENABLE_PROJECTS="clang;clang-tools-extra;lld;lldb;compiler-rt;polly" ^
            -D LLVM_TARGETS_TO_BUILD="AArch64;ARM;WebAssembly;X86" ^
            -D LLVM_BUILD_LLVM_C_DYLIB=OFF ^
            -D LLVM_ENABLE_BACKTRACES=OFF ^
            -D LLVM_ENABLE_UNWIND_TABLES=OFF ^
            -D LLVM_ENABLE_CRASH_OVERRIDES=OFF ^
            -D LLVM_ENABLE_CRASH_DUMPS=OFF ^
            -D LLVM_ENABLE_TERMINFO=OFF ^
            -D LLVM_ENABLE_LIBXML2=OFF ^
            -D LLVM_ENABLE_LIBEDIT=OFF ^
            -D LLVM_ENABLE_LIBPFM=OFF ^
            -D LLVM_ENABLE_ZLIB=OFF ^
            -D LLVM_ENABLE_ZSTD=OFF ^
            -D LLVM_ENABLE_CURL=OFF ^
            -D LLVM_ENABLE_HTTPLIB=OFF ^
            -D LLVM_ENABLE_Z3_SOLVER=OFF ^
            -D LLVM_ENABLE_WARNINGS=OFF ^
            -D LLVM_ENABLE_PEDANTIC=OFF ^
            -D LLVM_ENABLE_WERROR=OFF ^
            -D LLVM_ENABLE_ASSERTIONS=OFF ^
            -D LLVM_BUILD_EXAMPLES=OFF ^
            -D LLVM_BUILD_TESTS=OFF ^
            -D LLVM_BUILD_BENCHMARKS=OFF ^
            -D LLVM_BUILD_DOCS=OFF ^
            -D LLVM_INCLUDE_EXAMPLES=OFF ^
            -D LLVM_INCLUDE_TESTS=OFF ^
            -D LLVM_INCLUDE_BENCHMARKS=OFF ^
            -D LLVM_INCLUDE_DOCS=OFF ^
            -D LLVM_ENABLE_OCAMLDOC=OFF ^
            -D LLVM_ENABLE_BINDINGS=OFF ^
            -D LLVM_ENABLE_PLUGINS=OFF ^
            -D LLVM_ENABLE_IDE=OFF ^
            -D CLANG_BUILD_EXAMPLES=OFF ^
            -D CLANG_INCLUDE_TESTS=OFF ^
            -D CLANG_INCLUDE_DOCS=OFF ^
            -D CLANG_ENABLE_ARCMT=OFF ^
            -D CLANG_ENABLE_STATIC_ANALYZER=OFF ^
            -D COMPILER_RT_BUILD_SANITIZERS=ON ^
            -D COMPILER_RT_BUILD_LIBFUZZER=ON ^
            -D COMPILER_RT_BUILD_PROFILE=ON ^
            -D COMPILER_RT_BUILD_BUILTINS=OFF ^
            -D COMPILER_RT_BUILD_XRAY=OFF ^
            -D COMPILER_RT_BUILD_MEMPROF=OFF ^
            -D COMPILER_RT_BUILD_XRAY_NO_PREINIT=OFF ^
            -D COMPILER_RT_BUILD_ORC=OFF ^
            -D COMPILER_RT_BUILD_GWP_ASAN=OFF ^
            -D COMPILER_RT_ENABLE_CET=OFF
          
          ninja -C llvm-project-%VERSION%.build install
      - uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: llvm-project-${{ env.VERSION }}
      
          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: llvm-project-${{ env.VERSION }}
      - uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: llvm-project-${{ env.VERSION }} bin
      
          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: llvm-project-${{ env.VERSION }}.build\bin
      - uses: actions/upload-artifact@v4
        with:
          # Name of the artifact to upload.
          # Optional. Default is 'artifact'
          name: llvm-project-${{ env.VERSION }}.build
      
          # A file, directory or wildcard pattern that describes what to upload
          # Required.
          path: llvm-project-${{ env.VERSION }}.build
      
          # The desired behavior if no files are found using the provided path.
          # Available Options:
          #   warn: Output a warning but do not fail the action
          #   error: Fail the action with an error message
          #   ignore: Do not output any warnings or errors, the action does not fail
          # Optional. Default is 'warn'
          # if-no-files-found:
      
          # Duration after which artifact will expire in days. 0 means using default retention.
          # Minimum 1 day.
          # Maximum 90 days unless changed from the repository settings page.
          # Optional. Defaults to repository settings.
          retention-days: 90
      
          # The level of compression for Zlib to be applied to the artifact archive.
          # The value can range from 0 to 9.
          # For large files that are not easily compressed, a value of 0 is recommended for significantly faster uploads.
          # Optional. Default is '6'
          compression-level: 9
      
          # If true, an artifact with a matching name will be deleted before a new one is uploaded.
          # If false, the action will fail if an artifact for the given name already exists.
          # Does not fail if the artifact does not exist.
          # Optional. Default is 'false'
          overwrite: true
      - name: Create Release
        # You may pin to the exact commit or the version.
        # uses: ncipollo/release-action@a2e71bdd4e7dab70ca26a852f29600c98b33153e
        uses: ncipollo/release-action@v1.12.0
        if: |
          github.event_name == 'push' && github.ref == 'refs/heads/master'
        with:
          # An optional flag which indicates if we should update a release if it already exists. Defaults to false.
          allowUpdates: true # optional, default is
          # An optional flag which indicates if artifact read or upload errors should fail the build.
          artifactErrorsFailBuild: false # optional, default is
          # An optional set of paths representing artifacts to upload to the release. This may be a single path or a comma delimited list of paths (or globs)
          artifacts: llvm-project-${{ env.VERSION }}/**
          # The content type of the artifact. Defaults to raw
          artifactContentType: raw # optional, default is
          # An optional body for the release.
          # body: # optional, default is
          # An optional body file for the release. This should be the path to the file
          # bodyFile: # optional, default is
          # An optional commit reference. This will be used to create the tag if it does not exist.
          commit: ${{github.sha}} # optional, default is
          # When provided this will generate a discussion of the specified category. The category must exist otherwise this will cause the action to fail. This isn't used with draft releases
          # discussionCategory: # optional, default is
          # Optionally marks this release as a draft release. Set to true to enable.
          draft: false # optional, default is
          # Indicates if release notes should be automatically generated.
          generateReleaseNotes: true # optional, default is false
          # Indicates if the release should be the "latest" release or not.
          makeLatest: true # optional, default is legacy
          # An optional name for the release. If this is omitted the tag will be used.
          name: LLVM ${{ env.VERSION }} # optional, default is
          ## Indicates if the release body should be omitted.
          #omitBody: # optional, default is false
          ## Indicates if the release body should be omitted during updates. The body will still be applied for newly created releases. This will preserve the existing body during updates.
          #omitBodyDuringUpdate: # optional, default is false
          ## Indicates if the draft flag should be omitted during updates. The draft flag will still be applied for newly created releases. This will preserve the existing draft state during updates.
          #omitDraftDuringUpdate: # optional, default is false
          ## Indicates if the release name should be omitted.
          #omitName: # optional, default is false
          ## Indicates if the release name should be omitted during updates. The name will still be applied for newly created releases. This will preserve the existing name during updates.
          #omitNameDuringUpdate: # optional, default is false
          ## Indicates if the prerelease flag should be omitted during updates. The prerelease flag will still be applied for newly created releases. This will preserve the existing prerelease state during updates.
          #omitPrereleaseDuringUpdate: # optional, default is false
          # Optionally specify the owner of the repo where the release should be generated. Defaults to current repo's owner.
          # owner: # optional, default is
          # Optionally marks this release as prerelease. Set to true to enable.
          prerelease: false # optional, default is
          # Indicates if existing release artifacts should be removed, Defaults to false.
          removeArtifacts: false # optional, default is false
          # Indicates if existing release artifacts should be replaced. Defaults to true.
          replacesArtifacts: true # optional, default is true
          # Optionally specify the repo where the release should be generated. Defaults to current repo
          # repo: # optional, default is
          # When skipIfReleaseExists is enabled the action will be skipped if a non-draft release already exists for the provided tag.
          # skipIfReleaseExists: true # optional, default is false
          # An optional tag for the release. If this is omitted the git ref will be used (if it is a tag).
          tag: llvm-${{ env.VERSION }}-${{steps.sha.outputs.substring}}-${{github.run_id}} # optional, default is
          # The Github token.
          token: ${{ github.token }}
          # When allowUpdates is enabled, this will fail the action if the release it is updating is not a draft or a prerelease.
          # updateOnlyUnreleased: # optional, default is false
